#!/usr/bin/env bash
set -ex

GPUS=1
CPUS=0
BUILD=1
CASE=galaxy
export NO_PRINT=1
export NO_SAVE=1

fps=(double)
dims=(3)
steps=200
compilers=(nvgpu nvcpu clang gcc acpp)
if [ "${GPU}" = "amd" ]; then
    compilers=(amdclang acpp)
elif [ "${GPU}" = "intel" ]; then
    compilers=(acpp)
fi

algorithms=(all-pairs barnes-hut hilbert-tree all-pairs-collapsed)

if [ $BUILD = "1" ]; then
    # Build all binaries
    for c in ${compilers[@]}; do
	for d in ${dims[@]}; do
	    BUILD_ONLY=1 ./ci/run ${c} all-pairs $CASE ${d}
	done
    done

    # Build all binaries sequentially
    for c in ${compilers[@]}; do
	for d in ${dims[@]}; do
	    BUILD_ONLY=1 ./ci/run ${c} all-pairs $CASE ${d} double 1000 1000 1
	done
    done
fi

if command -v nvidia-smi > /dev/null ; then
  # Log which GPU and Driver this run is from
  nvidia-smi --query-gpu=gpu_name,driver_version --format=csv
elif command -v xpu-smi > /dev/null; then
  xpu-smi discovery
fi
lscpu | grep "Model name"
lscpu | grep "Core(s) per socket"
echo "hostname:$(hostname)"

if [ $GPUS = "1" ]; then
    compilers=(nvgpu acpp)
    if [ "${GPU}" = "amd" ]; then
	#compilers=(amdclang acpp)
	compilers=(acpp)
	algorithms=(all-pairs all-pairs-collapsed hilbert-tree)
    elif [ "${GPU}" = "intel" ]; then
        compilers=(acpp)
	algorithms=(all-pairs hilbert-tree)
    fi

    # Run for all algorithms
    bodies=(100000)
    for fp in ${fps[@]}; do
	for d in ${dims[@]}; do
	    for a in ${algorithms[@]}; do
		for c in ${compilers[@]}; do
		    echo "compiler:${c}"
		    for b in ${bodies[@]}; do
			RUN_ONLY=1 ./ci/run ${c} ${a} $CASE ${d} ${fp} ${b} ${steps}
		    done
		done
	    done
	done
    done

    # Only run large problems for these algorithms:
    algorithms=(barnes-hut hilbert-tree)
    if [ "${GPU}" = "amd" ]; then
	algorithms=(hilbert-tree)
    elif [ "${GPU}" = "intel"]; then
	algorithms=(hilbert-tree)
    fi

    bodies=(1000000)
    for fp in ${fps[@]}; do
	for d in ${dims[@]}; do
	    for a in ${algorithms[@]}; do
		for c in ${compilers[@]}; do
		    echo "compiler:${c}"
		    for b in ${bodies[@]}; do
			RUN_ONLY=1 ./ci/run ${c} ${a} $CASE ${d} ${fp} ${b} ${steps}
		    done
		done
	    done
	done
    done
fi

if [ $CPUS = "1" ]; then
    compilers=(nvcpu clang)

    # Only run mid sizes on CPUs for algorithms different from all-pairs-collapsed
    algorithms=(all-pairs barnes-hut hilbert-tree all-pairs-collapsed)
    bodies=(100000)
    for fp in ${fps[@]}; do
	for d in ${dims[@]}; do
	    for a in ${algorithms[@]}; do
		for c in ${compilers[@]}; do
		    echo "compiler:${c}"
		    for b in ${bodies[@]}; do
			RUN_ONLY=1 ./ci/run ${c} ${a} $CASE ${d} ${fp} ${b} ${steps}
		    done
		done
	    done
	done
    done

    # Only run large problems for these algorithms:
    algorithms=(barnes-hut hilbert-tree)
    bodies=(1000000)
    for fp in ${fps[@]}; do
	for d in ${dims[@]}; do
	    for a in ${algorithms[@]}; do
		for c in ${compilers[@]}; do
		    echo "compiler:${c}"
		    for b in ${bodies[@]}; do
			RUN_ONLY=1 ./ci/run ${c} ${a} $CASE ${d} ${fp} ${b} ${steps}
		    done
		done
	    done
	done
    done

    # Only run small sizes sequentially
    bodies=(10000)
    algorithms=(all-pairs barnes-hut hilbert-tree all-pairs-collapsed)
    echo "sequential:1"
    for fp in ${fps[@]}; do
	for d in ${dims[@]}; do
	    for a in ${algorithms[@]}; do
		for c in ${compilers[@]}; do
		    echo "compiler:${c}"
		    for b in ${bodies[@]}; do
			RUN_ONLY=1 ./ci/run ${c} ${a} $CASE ${d} ${fp} ${b} ${steps} 1
		    done
		done
	    done
	done
    done
fi
