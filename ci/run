#!/usr/bin/env sh
# Compiles and runs the n-body proxy application.
#
# ./run <toolchain> <algorithm> <workload case> <dim> <precision> <bodies> <steps> <sequential> <profiler>
#
# Examples:
# ./run nvgpu galaxy barnes-hut
# ./run nvgpu solar all-pairs 2 double
# BUILD=1 ./run nvgpu galaxy barnes-hut
# RUN=1 ./run nvgpu galaxy barnes-hut
set -ex
BODIES=100000
if [ ! -z $6 ]; then
    BODIES=$6
fi

STEPS=1000
if [ ! -z $7 ]; then
    STEPS=$7
fi

DIM=3
if [ ! -z $4 ]; then
    DIM=$4
fi

PREC=double
if [ ! -z $5 ]; then
    PREC=$5
fi

SEQUENTIAL=0
if [ ! -z $8 ]; then
    SEQUENTIAL=1
fi

PROFILER=0
if [ ! -z $9 ]; then
    PROFILER=1
fi

BUILD=1
RUN=1
if [ ! -z $RUN_ONLY ]; then
    if [ $RUN_ONLY = "1" ]; then
	BUILD=0
    fi
fi
if [ ! -z $BUILD_ONLY ]; then
    if [ $BUILD_ONLY = "1" ]; then
	RUN=0
    fi
fi
BIN="nbody_${1}_${DIM}"
if [ ! -f ${BIN} ]; then
    # Build binary if it does not exist
    BUILD=1
fi

if [ $SEQUENTIAL = "1" ]; then
    BIN="${BIN}_seq"
    CXXFLAGS="-DSEQUENTIAL"
fi

export ACPP_ADAPTIVITY_LEVEL=2
if [ "$GPU" = "amd" ] ; then
    export ACPP_VISIBILITY_MASK="omp;hip"
    #export ACPP_DEBUG_LEVEL=3
    #export ACPP_STDPAR_PREFETCH_MODE

    # MI250: there is no combination of XNACK/interpose-alloc that works.
    # - XNACK=0 + --hipstdpar-interpose-alloc: everything fails
    # - XNACK=1: all-pairs works, but hilbert-tree fails with HSA_STATUS_ERROR_MEMORY_APERTURE_VIOLATION
    export HSA_XNACK=1
    if [ $1 = "amdclang" ]; then
	#CXXFLAGS="${CXXFLAGS} --hipstdpar-interpose-alloc"
	CXXFLAGS="${CXXFLAGS}"
    fi

    # We do this to collect all-pairs-collapsed results, and test barnes-hut
    CXXFLAGS="${CXXFLAGS} -DUNSAFE_PAR_UNSEQ"
fi

if [ "$GPU" = "intel" ]; then
    export ACPP_VISIBILITY_MASK="omp;ocl:Graphics.*"
    export ACPP_STDPAR_MEM_POOL_SIZE=0

    # We do this to collect all-pairs-collapsed results, and test barnes-hut
    CXXFLAGS="${CXXFLAGS} -DUNSAFE_PAR_UNSEQ"
fi

NUMA_CMD=""
if [ $NUMA != "-1" ]; then
  NUMA_CMD="numactl --cpunodebind=${NUMA} --membind=${NUMA} "
fi

# Build the binary
if [ $BUILD = "1" ]; then
  # Build options for all compilers (portable standard compilation options):
  CXXFLAGS="${CXXFLAGS}  -std=c++20  -Wall -Wextra -Iinclude -DDIM_SIZE=${DIM} -o ${BIN}"
  CXXFLAGS="${CXXFLAGS} -Ofast -DNDEBUG -mcpu=native"
  #CXXFLAGS="${CXXFLAGS} -O0 -g3"
  case $1 in
    nvgpu)
	nvc++ ${CXXFLAGS} -stdpar=gpu -gpu=ccnative --diag_suppress no_device_stack src/main.cpp
	;;
    nvcpu)
	nvc++ ${CXXFLAGS} -stdpar=multicore src/main.cpp
	;;
    gcc)
	g++ ${CXXFLAGS} src/main.cpp -ltbb
	;;
    clang)
	clang++ ${CXXFLAGS} src/main.cpp -ltbb
	;;
    acpp)
	#export ACPP_ADAPTIVITY_LEVEL=2
	acpp-info -l
	acpp ${CXXFLAGS} --acpp-stdpar src/main.cpp -ltbb
	;;
    amdclang)
	${AMDCLANG} ${CXXFLAGS} -DUNSAFE_PAR_UNSEQ --hipstdpar --offload-arch=native src/main.cpp -ltbb
	;;
    *)
	echo "error: unknown compiler toolchain ${1}"
	echo "options are: nvgpu, nvcpu, gcc, clang, acpp, amdclang"
	exit 1
	;;
  esac
fi

# Run the binary:
if [ $RUN = "1" ]; then
  NO_SAVE=1
  SAVE="--save pos --csv-detailed"
  if [ ! -z $NO_SAVE ]; then
      if [ $NO_SAVE = "1" ]; then
	  SAVE="--save none --csv-total"
      elif [ $NO_SAVE = "2" ]; then
	  SAVE="--save none --csv-detailed"
      fi
  fi
  WORKLOAD="--workload ${3}"
  if [ "${3}" = "nasa" ]; then
      #DATASET="sim_asteroids"
      #DATASET="sim_planets"
      #DATASET="sim_sbdb_small"
      DATASET="sim_sbdb_mid"
      if [ ! -e ${DATASET}.bin ]; then
	  python3 scripts/thuering_nbody/conv_csv.py ${DATASET}.csv ${DATASET}.bin
      fi
      WORKLOAD="--workload load ${DATASET}.bin --theta 0.6"
      STEPS=25
  fi

  PROFILER_CMD=""
  if [ $PROFILER = "1" ]; then
      PROFILER_CMD="nsys profile --trace=nvtx,cuda,osrt --force-overwrite=true -o report.nsys-rep "
  elif [ $PROFILER = "2" ]; then
      PROFILER_CMD="ncu --force-overwrite=true -o report.nsys-rep "
  fi

  OMP_PLACES=cores OMP_PROC_BIND=close $PROFILER_CMD $NUMA_CMD \
    ./${BIN} -s $STEPS -n $BODIES ${SAVE} \
    --algorithm ${2} \
    $WORKLOAD \
    --precision ${PREC} #--print-info

  PRINT="1"
  if [ ! -z $NO_PRINT ]; then
      if [ $NO_PRINT = "1" ]; then
	  PRINT="0"
      fi
  fi
  if [ $PRINT = "1" ]; then
      python3 scripts/plotter.py pos --${3} --gif
      mv nbody_animation.gif nbody_d${DIM}_${1}_${2}_${3}_${PREC}.gif
  fi
fi
